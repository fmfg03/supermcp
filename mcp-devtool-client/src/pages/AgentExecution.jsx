import React, { useState, useRef, useEffect } from 'react'
import { useMCP } from '@/contexts/MCPContext'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Progress } from '@/components/ui/progress'
import { 
  Play, 
  Square, 
  Send, 
  Bot, 
  Clock, 
  Zap,
  CheckCircle,
  AlertTriangle,
  Copy,
  Download,
  Settings
} from 'lucide-react'

const AgentExecution = () => {
  const { 
    agents, 
    currentExecution, 
    executionHistory, 
    executeAgent, 
    stopExecution 
  } = useMCP()

  const [prompt, setPrompt] = useState('')
  const [selectedAgent, setSelectedAgent] = useState('')
  const [response, setResponse] = useState('')
  const [isStreaming, setIsStreaming] = useState(false)
  const [executionOptions, setExecutionOptions] = useState({
    temperature: 0.7,
    maxTokens: 2000,
    stream: true,
  })

  const responseRef = useRef(null)

  // Auto-scroll to bottom of response
  useEffect(() => {
    if (responseRef.current) {
      responseRef.current.scrollTop = responseRef.current.scrollHeight
    }
  }, [response])

  // Listen for streaming responses
  useEffect(() => {
    if (currentExecution && currentExecution.status === 'streaming') {
      setIsStreaming(true)
      // In a real implementation, this would listen to WebSocket events
      // For now, we'll simulate streaming
      simulateStreaming()
    } else {
      setIsStreaming(false)
    }
  }, [currentExecution])

  const simulateStreaming = () => {
    const sampleResponse = `# Agent Response

This is a simulated response from the ${selectedAgent} agent.

## Analysis
The agent is processing your request: "${prompt.substring(0, 100)}..."

## Steps Taken
1. **Input Processing**: Analyzing the user prompt
2. **Context Gathering**: Retrieving relevant information
3. **Reasoning**: Applying logical analysis
4. **Response Generation**: Creating structured output

## Results
The agent has successfully processed your request and generated this response.

### Key Findings
- Input was well-formed and clear
- No contradictions detected
- High confidence in the response

### Recommendations
- Consider refining the prompt for more specific results
- Review the output for accuracy
- Use the debugger to analyze the reasoning process

---
*Response generated by ${selectedAgent} at ${new Date().toLocaleTimeString()}*`

    let currentText = ''
    const words = sampleResponse.split(' ')
    let wordIndex = 0

    const streamInterval = setInterval(() => {
      if (wordIndex < words.length) {
        currentText += words[wordIndex] + ' '
        setResponse(currentText)
        wordIndex++
      } else {
        clearInterval(streamInterval)
        setIsStreaming(false)
      }
    }, 50)
  }

  const handleExecute = () => {
    if (!prompt.trim() || !selectedAgent) return

    setResponse('')
    setIsStreaming(true)
    
    executeAgent(selectedAgent, prompt, executionOptions)
  }

  const handleStop = () => {
    stopExecution()
    setIsStreaming(false)
  }

  const handleCopyResponse = () => {
    navigator.clipboard.writeText(response)
  }

  const handleDownloadResponse = () => {
    const blob = new Blob([response], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `agent-response-${Date.now()}.md`
    a.click()
    URL.revokeObjectURL(url)
  }

  const getAgentIcon = (agentId) => {
    switch (agentId) {
      case 'complete_mcp_agent': return 'ðŸŽ¯'
      case 'reasoning_agent': return 'ðŸ§ '
      case 'builder_agent': return 'ðŸ”¨'
      default: return 'ðŸ¤–'
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-3xl font-bold">Agent Execution</h1>
        <p className="text-muted-foreground">
          Execute MCP agents with custom prompts and monitor responses in real-time
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Input Panel */}
        <div className="lg:col-span-1 space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Bot className="w-5 h-5" />
                <span>Agent Configuration</span>
              </CardTitle>
              <CardDescription>
                Select an agent and configure execution parameters
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Agent Selection */}
              <div className="space-y-2">
                <label className="text-sm font-medium">Agent</label>
                <Select value={selectedAgent} onValueChange={setSelectedAgent}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select an agent" />
                  </SelectTrigger>
                  <SelectContent>
                    {agents.map((agent) => (
                      <SelectItem key={agent.id} value={agent.id}>
                        <div className="flex items-center space-x-2">
                          <span>{getAgentIcon(agent.id)}</span>
                          <span>{agent.name}</span>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {selectedAgent && (
                  <p className="text-xs text-muted-foreground">
                    {agents.find(a => a.id === selectedAgent)?.description}
                  </p>
                )}
              </div>

              {/* Prompt Input */}
              <div className="space-y-2">
                <label className="text-sm font-medium">Prompt</label>
                <Textarea
                  placeholder="Enter your prompt here..."
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  rows={6}
                  className="resize-none"
                />
                <p className="text-xs text-muted-foreground">
                  {prompt.length} characters
                </p>
              </div>

              {/* Execution Options */}
              <div className="space-y-3">
                <label className="text-sm font-medium">Options</label>
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Temperature</span>
                    <span className="text-sm text-muted-foreground">
                      {executionOptions.temperature}
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Max Tokens</span>
                    <span className="text-sm text-muted-foreground">
                      {executionOptions.maxTokens}
                    </span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Streaming</span>
                    <Badge variant={executionOptions.stream ? 'default' : 'secondary'}>
                      {executionOptions.stream ? 'Enabled' : 'Disabled'}
                    </Badge>
                  </div>
                </div>
              </div>

              {/* Execute Button */}
              <div className="space-y-2">
                {!isStreaming ? (
                  <Button 
                    onClick={handleExecute}
                    disabled={!prompt.trim() || !selectedAgent}
                    className="w-full"
                  >
                    <Play className="w-4 h-4 mr-2" />
                    Execute Agent
                  </Button>
                ) : (
                  <Button 
                    onClick={handleStop}
                    variant="destructive"
                    className="w-full"
                  >
                    <Square className="w-4 h-4 mr-2" />
                    Stop Execution
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Current Execution Status */}
          {currentExecution && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <div className="status-indicator active"></div>
                  <span>Execution Status</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm">Agent</span>
                  <Badge>{currentExecution.agent}</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Status</span>
                  <Badge variant={isStreaming ? 'default' : 'secondary'}>
                    {isStreaming ? 'Streaming' : currentExecution.status}
                  </Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Started</span>
                  <span className="text-sm text-muted-foreground">
                    {new Date(currentExecution.timestamp).toLocaleTimeString()}
                  </span>
                </div>
                {isStreaming && (
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-sm">Progress</span>
                      <span className="text-sm text-muted-foreground">Processing...</span>
                    </div>
                    <Progress value={65} className="w-full" />
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </div>

        {/* Response Panel */}
        <div className="lg:col-span-2 space-y-4">
          <Card className="h-[600px] flex flex-col">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center space-x-2">
                    <Zap className="w-5 h-5" />
                    <span>Agent Response</span>
                  </CardTitle>
                  <CardDescription>
                    Live streaming response from the selected agent
                  </CardDescription>
                </div>
                <div className="flex items-center space-x-2">
                  {response && (
                    <>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleCopyResponse}
                      >
                        <Copy className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleDownloadResponse}
                      >
                        <Download className="w-4 h-4" />
                      </Button>
                    </>
                  )}
                </div>
              </div>
            </CardHeader>
            <CardContent className="flex-1 overflow-hidden">
              <ScrollArea 
                ref={responseRef}
                className="h-full w-full border rounded-lg p-4 bg-muted/20"
              >
                {response ? (
                  <div className="space-y-2">
                    <pre className="whitespace-pre-wrap text-sm font-mono">
                      {response}
                    </pre>
                    {isStreaming && (
                      <div className="flex items-center space-x-2 text-muted-foreground">
                        <div className="loading-spinner w-3 h-3 border border-current border-t-transparent rounded-full"></div>
                        <span className="text-xs">Streaming...</span>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="flex items-center justify-center h-full text-muted-foreground">
                    <div className="text-center space-y-2">
                      <Bot className="w-12 h-12 mx-auto opacity-50" />
                      <p>No response yet</p>
                      <p className="text-xs">Execute an agent to see the response here</p>
                    </div>
                  </div>
                )}
              </ScrollArea>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Execution History */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Clock className="w-5 h-5" />
            <span>Execution History</span>
          </CardTitle>
          <CardDescription>
            Recent agent executions and their results
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {executionHistory.length > 0 ? (
              executionHistory.slice(0, 10).map((execution, index) => (
                <div key={execution.id || index} className="flex items-center justify-between p-3 bg-muted rounded-lg">
                  <div className="flex items-center space-x-3">
                    <div className="text-lg">{getAgentIcon(execution.agent)}</div>
                    <div>
                      <p className="text-sm font-medium">{execution.agent}</p>
                      <p className="text-xs text-muted-foreground">
                        {execution.prompt?.substring(0, 80)}...
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <div className="text-right">
                      <Badge variant={
                        execution.status === 'completed' ? 'default' :
                        execution.status === 'error' ? 'destructive' : 'secondary'
                      }>
                        {execution.status === 'completed' ? (
                          <CheckCircle className="w-3 h-3 mr-1" />
                        ) : execution.status === 'error' ? (
                          <AlertTriangle className="w-3 h-3 mr-1" />
                        ) : null}
                        {execution.status}
                      </Badge>
                      <p className="text-xs text-muted-foreground mt-1">
                        {new Date(execution.timestamp).toLocaleString()}
                      </p>
                    </div>
                    <Button variant="outline" size="sm">
                      View
                    </Button>
                  </div>
                </div>
              ))
            ) : (
              <div className="text-center py-8 text-muted-foreground">
                <Clock className="w-12 h-12 mx-auto opacity-50 mb-2" />
                <p>No execution history</p>
                <p className="text-xs">Execute an agent to see history here</p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

export default AgentExecution

